esphome:
    includes:
        - components/display/draw_helpers.h
    name: eink-hall
    friendly_name: eink-hall
    on_boot:
        priority: 200.0
        then:
            - component.update: eink_display
            - wait_until:
                  condition:
                      lambda: 'return id(data_updated) == true;'
                      # Wait a bit longer so all the items are received
            - delay: 5s
            - logger.log: 'Initial sensor data received: Refreshing display...'
            - lambda: 'id(initial_data_received) = true;'
            - script.execute: update_screen

esp32:
    board: esp32dev
    framework:
        type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
    encryption:
        key: 'l8AxheX2pC3WHTN7qlgD79PeM4c1GH3b9HEbWsuS9RE='

ota:
    - platform: esphome
      password: ''

wifi:
    ssid: !secret wifi_ssid
    password: !secret wifi_password

    # Enable fallback hotspot (captive portal) in case wifi connection fails
    ap:
        ssid: 'Eink-Hall Fallback Hotspot'
        password: 'mPJf6qNb66C3'

button:
    - platform: shutdown
      name: 'Eink-Hall - Shutdown'
    - platform: restart
      name: 'Eink-Hall - Restart'
    - platform: template
      name: 'Eink-Hall - Refresh Screen'
      entity_category: config
      on_press:
          - script.execute: update_screen

# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
    - id: data_updated
      type: bool
      restore_value: no
      initial_value: 'false'
    - id: initial_data_received
      type: bool
      restore_value: no
      initial_value: 'false'
    - id: recorded_display_refresh
      type: int
      restore_value: yes
      initial_value: '0'
    - id: current_text_portion
      type: int
      restore_value: no
      initial_value: '0'
    - id: enable_display_loop
      type: bool
      initial_value: 'false'

interval:
    - interval: 15s
      then:
          - lambda: |-
                if (id(enable_display_loop)) {
                  id(current_text_portion) += 1;
                }
          - if:
                condition:
                    lambda: 'return id(enable_display_loop);'
                then:
                    - component.update: eink_display

# Script for updating screen - Refresh display and publish refresh count and time. (Thanks @paviro!)
script:
    - id: update_screen
      then:
          - lambda: 'id(data_updated) = false;'
          - component.update: eink_display
          - lambda: 'id(recorded_display_refresh) += 1;'
          - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'
    - id: start_display_loop
      mode: restart
      then:
          - lambda: |-
                id(enable_display_loop) = true;
          - delay: 2min
          - lambda: |-
                id(enable_display_loop) = false;

# Check whether the display needs to be refreshed every minute,
# based on whether new data is received or motion is detected. (Thanks @paviro!)
time:
    - platform: homeassistant
      id: homeassistant_time
      on_time:
          - seconds: /10
            then:
                - if:
                      condition:
                          lambda: 'return id(data_updated) == true;'
                      then:
                          - if:
                                condition:
                                    binary_sensor.is_on: motion_detected
                                then:
                                    - logger.log: 'Sensor data updated and activity in home detected: Refreshing display...'
                                    - script.execute: update_screen
                                else:
                                    - logger.log: 'Sensor data updated but no activity in home - skipping display refresh.'
                      else:
                          - logger.log: 'No sensors updated - skipping display refresh.'

# Images
image:
    binary:
        - file: 'components/images/star.png'
          id: star_image
          resize: 20x20

# Include custom fonts
font:
    - file: 'fonts/GothamRnd-Book.ttf'
      id: font_small_book
      size: 18
      glyphs: ABCDEGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzàäèéêëîïôöùûüçÀÄÈÉÊËÎÏÔÖÙÛÜÇ .,;:!/'[]{}?()0123456789°-+=&%
    - file: 'fonts/RousseauDeco.ttf'
      id: font_large_bold
      size: 108
      # [' ', '-', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C']
    - file: 'fonts/RousseauDeco.ttf'
      id: font_title
      size: 54
      # glyphs: ['M', 'E', 'T', 'O', 'I', 'N', 'F', 'R', 'A', 'S']
    - file: 'fonts/RousseauDeco.ttf'
      id: font_medium_bold
      size: 30
      # glyphs: [' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'M', 'I', 'N']
    - file: 'fonts/RousseauDeco.ttf'
      id: font_small_bold
      size: 18
      # glyphs: [' ', '-', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', 'M', 'I', 'N']

    # Include Material Design Icons font
    # Thanks to https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
    - file: 'fonts/materialdesignicons-webfont.ttf'
      id: font_mdi_large
      size: 96
      glyphs: &mdi-weather-glyphs
          - "\U000F0590" # mdi-weather-cloudy
          - "\U000F0F2F" # mdi-weather-cloudy-alert
          - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
          - "\U000F0591" # mdi-weather-fog
          - "\U000F0592" # mdi-weather-hail
          - "\U000F0F30" # mdi-weather-hazy
          - "\U000F0898" # mdi-weather-hurricane
          - "\U000F0593" # mdi-weather-lightning
          - "\U000F067E" # mdi-weather-lightning-rainy
          - "\U000F0594" # mdi-weather-night
          - "\U000F0F31" # mdi-weather-night-partly-cloudy
          - "\U000F0595" # mdi-weather-partly-cloudy
          - "\U000F0F32" # mdi-weather-partly-lightning
          - "\U000F0F33" # mdi-weather-partly-rainy
          - "\U000F0F34" # mdi-weather-partly-snowy
          - "\U000F0F35" # mdi-weather-partly-snowy-rainy
          - "\U000F0596" # mdi-weather-pouring
          - "\U000F0597" # mdi-weather-rainy
          - "\U000F0598" # mdi-weather-snowy
          - "\U000F0F36" # mdi-weather-snowy-heavy
          - "\U000F067F" # mdi-weather-snowy-rainy
          - "\U000F0599" # mdi-weather-sunny
          - "\U000F0F37" # mdi-weather-sunny-alert
          - "\U000F14E4" # mdi-weather-sunny-off
          - "\U000F059A" # mdi-weather-sunset
          - "\U000F059B" # mdi-weather-sunset-down
          - "\U000F059C" # mdi-weather-sunset-up
          - "\U000F0F38" # mdi-weather-tornado
          - "\U000F059D" # mdi-weather-windy
          - "\U000F059E" # mdi-weather-windy-variant
          - "\U000F1508" # F1508 mdi-water-off-outline
          - "\U000F15BE" # F15BE mdi-scooter-electric
    - file: 'fonts/materialdesignicons-webfont.ttf'
      id: font_mdi_medium
      size: 36
      glyphs: *mdi-weather-glyphs

    - file: 'fonts/materialdesignicons-webfont.ttf'
      id: font_wifi_bat
      size: 20
      glyphs: [
              # Wifi
              "\U000F092E", # F092E mdi-wifi-strength-off-outline
              "\U000F092F", # F092F mdi-wifi-strength-outline
              "\U000F091F", # F091F mdi-wifi-strength-1
              "\U000F0922", # F0922 mdi-wifi-strength-2
              "\U000F0925", # F0925 mdi-wifi-strength-3
              "\U000F0928", # F0928 mdi-wifi-strength-4
          ]

sensor:
    # Create sensors for monitoring Eink-Hall remotely.
    - platform: template
      name: 'Eink-Hall - Display Last Update'
      device_class: timestamp
      entity_category: 'diagnostic'
      id: display_last_update

    - platform: template
      name: 'Eink-Hall - Recorded Display Refresh'
      accuracy_decimals: 0
      unit_of_measurement: 'Refreshes'
      state_class: 'total_increasing'
      entity_category: 'diagnostic'
      lambda: 'return id(recorded_display_refresh);'

    - platform: wifi_signal
      name: 'Eink-Hall - WiFi Signal Strength'
      id: wifisignal
      unit_of_measurement: 'dBm'
      entity_category: 'diagnostic'
      update_interval: 60s

    # Reports the WiFi signal strength in %
    - platform: copy
      source_id: wifisignal
      name: 'WiFi Signal Percent'
      id: wifi_signal_percent
      filters:
          - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
      unit_of_measurement: 'Signal %'
      entity_category: 'diagnostic'

    # Weather temperature from home assistant
    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_temperature_now
      id: weather_temperature_now
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_temperature_0
      id: weather_temperature_0
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_temperature_1
      id: weather_temperature_1
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_temperature_2
      id: weather_temperature_2
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_temperature_3
      id: weather_temperature_3
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_temperature_4
      id: weather_temperature_4
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    # Best 5 Trottinettes autonomy in km
    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: best_trottinette_1
      id: best_trottinette_1
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: best_trottinette_2
      id: best_trottinette_2
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: best_trottinette_3
      id: best_trottinette_3
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: best_trottinette_4
      id: best_trottinette_4
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: best_trottinette_5
      id: best_trottinette_5
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

text_sensor:
    # Current french time
    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: current_time
      id: current_time
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    # Weather next rain sensor from home assistant
    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_0
      id: next_rain_0
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_1
      id: next_rain_1
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_2
      id: next_rain_2
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_3
      id: next_rain_3
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_4
      id: next_rain_4
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_5
      id: next_rain_5
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_6
      id: next_rain_6
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_7
      id: next_rain_7
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: next_rain_8
      id: next_rain_8
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    # Weather condition from home assistant
    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_condition_now
      id: weather_condition_now
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_condition_0
      id: weather_condition_0
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_condition_1
      id: weather_condition_1
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_condition_2
      id: weather_condition_2
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_condition_3
      id: weather_condition_3
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_condition_4
      id: weather_condition_4
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    # Weather timestamp from home assistant
    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_timestamp_0
      id: weather_timestamp_0
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_timestamp_1
      id: weather_timestamp_1
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_timestamp_2
      id: weather_timestamp_2
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_timestamp_3
      id: weather_timestamp_3
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: weather_timestamp_4
      id: weather_timestamp_4
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    # Trottinettes count
    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: trottinettes_count
      id: trottinettes_count
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    # TCL Incidents
    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: tcl_incidents
      id: tcl_incidents
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

    - platform: homeassistant
      entity_id: sensor.eink_hall_data
      attribute: tcl_incidents_messages
      id: tcl_incidents_messages
      on_value:
          then:
              - lambda: 'id(data_updated) = true;'

# Check if motion is detected in the living room.
binary_sensor:
    - platform: homeassistant
      entity_id: binary_sensor.motion_sensor_hall_occupancy
      id: motion_detected
      on_press:
          then:
              - script.execute: start_display_loop

# Define colors
# This design is white on black so this is necessary.
color:
    - id: color_black
      red: 0%
      green: 0%
      blue: 0%
      white: 0%
    - id: color_white
      red: 0%
      green: 0%
      blue: 0%
      white: 100%
    - id: color_gray_light
      red: 0%
      green: 0%
      blue: 0%
      white: 66%
    - id: color_gray_dark
      red: 0%
      green: 0%
      blue: 0%
      white: 33%

# Pins for Waveshare ePaper ESP Board
spi:
    clk_pin: GPIO13
    mosi_pin: GPIO14

# Now render everything on the ePaper screen.
display:
    - platform: waveshare_epaper
      id: eink_display
      cs_pin: GPIO15
      dc_pin: GPIO27
      busy_pin:
          number: GPIO25
          inverted: true
      reset_pin: GPIO26
      reset_duration: 2ms
      model: 7.50inV2p
      update_interval: never
      rotation: 90
      lambda: |-
          // Map weather states to MDI characters.
          std::map<std::string, std::string> weather_icon_map
            {
              {"cloudy", "\U000F0590"},
              {"cloudy-alert", "\U000F0F2F"},
              {"cloudy-arrow-right", "\U000F0E6E"},
              {"fog", "\U000F0591"},
              {"hail", "\U000F0592"},
              {"hazy", "\U000F0F30"},
              {"hurricane", "\U000F0898"},
              {"lightning", "\U000F0593"},
              {"lightning-rainy", "\U000F067E"},
              {"clear-night", "\U000F0594"},
              {"night-partly-cloudy", "\U000F0F31"},
              {"partlycloudy", "\U000F0595"},
              {"partly-lightning", "\U000F0F32"},
              {"partly-rainy", "\U000F0F33"},
              {"partly-snowy", "\U000F0F34"},
              {"partly-snowy-rainy", "\U000F0F35"},
              {"pouring", "\U000F0596"},
              {"rainy", "\U000F0597"},
              {"snowy", "\U000F0598"},
              {"snowy-heavy", "\U000F0F36"},
              {"snowy-rainy", "\U000F067F"},
              {"sunny", "\U000F0599"},
              {"sunny-alert", "\U000F0F37"},
              {"sunny-off", "\U000F14E4"},
              {"sunset", "\U000F059A"},
              {"sunset-down", "\U000F059B"},
              {"sunset-up", "\U000F059C"},
              {"tornado", "\U000F0F38"},
              {"windy", "\U000F059D"},
              {"windy-variant", "\U000F059E"},
              {"Temps sec", "\U000F1508"},
              {"Pluie faible", "\U000F0F33"},
              {"Pluie modérée", "\U000F0597"},
              {"Pluie forte", "\U000F0596"},
              {"scooter-electric", "\U000F15BE"},
            };

          int eink_screen_width = it.get_width();
          int eink_screen_height = it.get_height();
          int separator_left = 70;
          int separator_width = eink_screen_width - separator_left * 2;
          int separator_height = 3;
          int eink_middle_width = eink_screen_width / 2;

          // Show loading screen before data is received.
          if (id(initial_data_received) == false) {
            // Fill background.
            // it.fill(color_black);

            it.printf(eink_middle_width, 390, id(font_small_bold), color_white, TextAlign::TOP_CENTER, "WAITING FOR DATA...");
          } else {
            // Fill background.
            // it.fill(color_black);

            // Art deco style frame
            draw_art_deco_frame(it, id(star_image), 0, 0, eink_screen_width, eink_screen_height, 20, 20);

            it.printf(eink_middle_width, 10, id(font_small_book), color_white, TextAlign::TOP_CENTER, "%s", id(current_time).state.c_str());

            int top_title = 44;

            // Weather Section
            draw_art_deco_title(it, eink_middle_width, top_title, id(font_title), color_white, "METEO");

            int top_today_weather = top_title + 74;
            it.printf(100, top_today_weather, id(font_mdi_large), color_white, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
            it.printf(300, top_today_weather, id(font_large_bold), color_white, TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_now).state);

            int top_first_weather_separator = top_today_weather + 112;
            draw_art_deco_separator(it, id(star_image), separator_left, top_first_weather_separator, separator_width, separator_height);

            auto timestamps = std::array<esphome::homeassistant::HomeassistantTextSensor*, 5>{
              id(weather_timestamp_0),
              id(weather_timestamp_1),
              id(weather_timestamp_2),
              id(weather_timestamp_3),
              id(weather_timestamp_4),
            };

            auto conditions = std::array<esphome::homeassistant::HomeassistantTextSensor*, 5>{
              id(weather_condition_0),
              id(weather_condition_1),
              id(weather_condition_2),
              id(weather_condition_3),
              id(weather_condition_4),
            };

            auto temperatures = std::array<esphome::homeassistant::HomeassistantSensor*, 5>{
              id(weather_temperature_0),
              id(weather_temperature_1),
              id(weather_temperature_2),
              id(weather_temperature_3),
              id(weather_temperature_4),
            };

            int top_hourly_weather = top_first_weather_separator + 22;
            for (int i = 0; i < 5; i++) {
              int x = 80 + i * 80;

              it.printf(x, top_hourly_weather, id(font_small_book), color_white, TextAlign::TOP_CENTER, "%s", timestamps[i]->state.c_str());

              it.printf(x, top_hourly_weather + 24, id(font_mdi_medium), color_white, TextAlign::TOP_CENTER, "%s", weather_icon_map[conditions[i]->state.c_str()].c_str());

              it.printf(x, top_hourly_weather + 72, id(font_small_bold), color_white, TextAlign::TOP_CENTER, "%2.0f°C", temperatures[i]->state);
            }

            int top_next_hour_weather = top_hourly_weather + 98;
            draw_rounded_dithered_box(it, 55, top_next_hour_weather, 370, 70, 10, color_white);  // Weather box

            auto next_rains = std::array<esphome::homeassistant::HomeassistantTextSensor*, 9>{
              id(next_rain_0),
              id(next_rain_1),
              id(next_rain_2),
              id(next_rain_3),
              id(next_rain_4),
              id(next_rain_5),
              id(next_rain_6),
              id(next_rain_7),
              id(next_rain_8),
            };

            std::array<const char*, 9> rain_times = {"0", "5", "10", "15", "20", "25", "35", "45", "55"};

            for (int i = 0; i < 9; i++) {
              int x = 80 + (i * 40);
              it.printf(x, top_next_hour_weather + 10, id(font_mdi_medium), color_white, TextAlign::TOP_CENTER, "%s", weather_icon_map[next_rains[i]->state.c_str()].c_str());
              it.printf(x, top_next_hour_weather + 45, id(font_small_book), color_white, TextAlign::TOP_CENTER, "%s", rain_times[i]);
            }

            int top_second_weather_separator = top_next_hour_weather + 90;
            // it.filled_rectangle(separator_left, top_second_weather_separator, separator_width, separator_height);

            int top_informations_title = top_second_weather_separator + 20;
            // Transports Service Section
            draw_art_deco_title(it, eink_middle_width, top_informations_title, id(font_title), color_white, "INFOS");

            int top_trottinettes = top_informations_title + 60;
            // Trottinettes total number
            it.printf(60, top_trottinettes + 10, id(font_small_book), color_white, TextAlign::CENTER_LEFT, "%s", "Trottinettes");
            it.printf(60, top_trottinettes + 50, id(font_medium_bold), color_white, TextAlign::CENTER_LEFT, "Total: %s", id(trottinettes_count).state.c_str());

            // Best 5 Trottinettes autonomy
            draw_rounded_dithered_box(it, 210, top_trottinettes, 220, 70, 10, color_white); // Scooter box

            auto trottinettes = std::array<esphome::homeassistant::HomeassistantSensor*, 5>{
              id(best_trottinette_1),
              id(best_trottinette_2),
              id(best_trottinette_3),
              id(best_trottinette_4),
              id(best_trottinette_5),
            };

            for (int i = 0; i < trottinettes.size(); i++) {
              if (trottinettes[i]->state != 0) {
                int x = 240 + (i * 40);
                it.printf(x, top_trottinettes + 10, id(font_mdi_medium), color_white, TextAlign::TOP_CENTER, "%s", weather_icon_map["scooter-electric"].c_str());
                it.printf(x, top_trottinettes + 45, id(font_small_book), color_white, TextAlign::TOP_CENTER, "%2.0fk", trottinettes[i]->state);
              }
            }


            int top_tcl_incidents = top_trottinettes + 110;
            // TCL incidents
            if (id(tcl_incidents_messages).state != "None") {
              draw_art_deco_separator(it, id(star_image), separator_left, top_trottinettes + 90, separator_width, separator_height);
              it.printf(60, top_tcl_incidents, id(font_medium_bold), color_white, TextAlign::TOP_LEFT, "%s", id(tcl_incidents).state.c_str());
              wrap_text(it, 30, top_tcl_incidents + 25, eink_screen_width - 60, 18, id(tcl_incidents_messages).state.c_str(), id(font_small_book), color_white, color_black, id(current_text_portion), 6);
            }

            // Refresh Timestamp
            // Code by EnsconcE from https://community.home-assistant.io/t/esphome-show-time/348903
            int wifi_icon_x = 460;
            int wifi_icon_y = 770;

            char str_time[17];
            char str_date[17];
            time_t currTime = id(homeassistant_time).now().timestamp;
            strftime(str_time, sizeof(str_time), "%H:%M", localtime(&currTime));
            strftime(str_date, sizeof(str_date), "%d.%m.%Y", localtime(&currTime));
            it.printf(240, 772, id(font_small_book), color_white, TextAlign::TOP_CENTER, "M.À.J. le %s à %s", str_date, str_time);

            if(id(wifi_signal_percent).has_state())
            {
              if (id(wifi_signal_percent).state >= -50) {
                  //Excellent
                  it.print(wifi_icon_x, wifi_icon_y, id(font_wifi_bat), color_white, TextAlign::TOP_CENTER, "\U000F0928");
                  ESP_LOGI("WiFi", "Exellent");
              } else if (id(wifi_signal_percent).state  >= 90) {
                  //Good
                  it.print(wifi_icon_x, wifi_icon_y, id(font_wifi_bat), color_white, TextAlign::TOP_CENTER, "\U000F0925");
                  ESP_LOGI("WiFi", "Good");
              } else if (id(wifi_signal_percent).state  >= 50) {
                  //Fair
                  it.print(wifi_icon_x, wifi_icon_y, id(font_wifi_bat), color_white, TextAlign::TOP_CENTER, "\U000F0922");
                  ESP_LOGI("WiFi", "Fair");
              } else if (id(wifi_signal_percent).state  >= 30) {
                  //Weak
                  it.print(wifi_icon_x, wifi_icon_y, id(font_wifi_bat), color_white, TextAlign::TOP_CENTER, "\U000F091F");
                  ESP_LOGI("WiFi", "Weak");
              } else {
                  //Unlikely working signal
                  it.print(wifi_icon_x, wifi_icon_y, id(font_wifi_bat), color_white, TextAlign::TOP_CENTER, "\U000F092F");
                  ESP_LOGI("WiFi", "Unlikely");
              }
            } else
            {
              //no signal (yet)
              it.print(wifi_icon_x, wifi_icon_y, id(font_wifi_bat), color_white, TextAlign::TOP_CENTER, "\U000F092E");
              ESP_LOGI("WiFi", "No signal");
            }
          }

captive_portal:
